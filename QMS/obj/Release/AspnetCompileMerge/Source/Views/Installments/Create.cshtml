@using NMS.Core.Resources
@model NMS.Data.Installment

@{
    ViewBag.Title = CommonRes.Create;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@CommonRes.Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
     <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">@MenuRes.Installment</h3>
                </div>

                <div class="panel-body">
   
        @Html.ValidationSummary(true)
                    <div class="row">
                        <div class="col-lg-3">
                            @Html.Label(NMSRes.cusid, "Cus_ID")

                            @Html.DropDownList("Cus_ID", null, CommonRes.SelectDropDown, new {@class = "form-control", @Chosen = "Chosen" })
                            @Html.ValidationMessageFor(model => model.Cus_ID)
                        </div>
                        <div class="col-lg-3">
                            @Html.Label(NMSRes.StartDate)

                            @Html.TextBoxFor(model => model.StartDate, new {@class = "form-control", @Date = "DatePicker"})
                            @Html.ValidationMessageFor(model => model.StartDate)
                        </div>
                        <div class="col-lg-3">
                            @Html.Label(NMSRes.EndDate)

                            @Html.TextBoxFor(model => model.EndDate, new {@class = "form-control", @Date = "DatePicker" })
                            @Html.ValidationMessageFor(model => model.EndDate)
                        </div>
                        </div>
                    <div class="row">
                        
                        <div class="col-lg-3">
                            @Html.Label(NMSRes.No_Of_Inst)

                            @Html.TextBoxFor(model => model.No_Of_Inst, new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.No_Of_Inst)
                        </div>
                        <div class="col-lg-3">
                            @Html.Label(NMSRes.Amount)

                            @Html.TextBoxFor(model => model.Amount, new {@class = "form-control",@onchange= "return digitGrouping(this);" })
                            @Html.ValidationMessageFor(model => model.Amount)
                        </div>
                        <div class="col-lg-3">
                            @Html.Label(NMSRes.Comment)

                            @Html.TextBoxFor(model => model.Comment, new {@class = "form-control"})
                            @Html.ValidationMessageFor(model => model.Comment)
                        </div>

                    </div>
                      
                    </div>
 </div>
    </div>
 </div>
 <center>
        <input class="btn btn-primary btn active" type="submit" value="@CommonRes.Button_Save">
        <input class="btn btn-default" type="reset" value="@CommonRes.Button_Cancel">
    </center>
}

<div>
    @Html.ActionLink(CommonRes.BackToList, "Index")
</div>

@section Scripts {
    <script type="text/javascript">

        function digitGrouping(id) {
            var final = "";
            var temp = "";
            var vlue = $('#Amount').val();
            var res = vlue.split(".");
            if (res.length === 1) {
                temp = removeCommas(vlue);
                final = groupingExecute(temp);
            }
            else {
                temp = removeCommas(res[0]);
                final = groupingExecute(temp);
                temp = removeCommas(res[1]);
                final = final + "." + groupingExecute(temp);
            }
            //auth = auth.replace(/,/g, "");
            $('#Amount').val(final);
        }
        function removeCommas(str) {
            while (str.search(",") >= 0) {
                str = (str + "").replace(',', '');
            }
            return str;
        }
        function groupingExecute(vlue) {
            var auth = vlue.toString("{0:##,##.##}");
            var offset = vlue.length % 3;
            if (offset == 0)
                auth = vlue.substring(0, offset) + vlue.substring(offset).replace(/([0-9]{3})(?=[0-9]+)/g, "$1,");
            else
                auth = vlue.substring(0, offset) + vlue.substring(offset).replace(/([0-9]{3})/g, ",$1");

            return auth;
        }
    </script>
}